"""
Script de inicializa√ß√£o da aplica√ß√£o com migra√ß√£o autom√°tica.
"""
import subprocess
import sys
import os

# Adiciona o diret√≥rio pai ao path para importar utils
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from App.utils.logger import get_logger

# Logger para este m√≥dulo
logger = get_logger(__name__)

def run_migration():
    """Executa as migra√ß√µes do banco de dados."""
    logger.info("üîÑ Executando migra√ß√µes do banco de dados...")
    
    migration_script = os.path.join(
        os.path.dirname(__file__), 
        "Database", 
        "migrations", 
        "001_create_chat_tables.py"
    )
    
    try:
        result = subprocess.run([sys.executable, migration_script], capture_output=True, text=True)
        if result.returncode == 0:
            logger.info("‚úÖ Migra√ß√µes executadas com sucesso!")
            if result.stdout:
                logger.info(result.stdout)
        else:
            logger.error("‚ùå Erro durante as migra√ß√µes:")
            logger.error(result.stderr)
            return False
    except Exception as e:
        logger.error(f"‚ùå Erro ao executar migra√ß√µes: {e}")
        return False
    
    return True

def start_app():
    """Inicia a aplica√ß√£o Flask."""
    logger.info("üöÄ Iniciando aplica√ß√£o...")
    
    app_script = os.path.join(os.path.dirname(__file__), "App", "app.py")
    
    try:
        # Muda para o diret√≥rio da app
        os.chdir(os.path.join(os.path.dirname(__file__), "App"))
        
        # Executa a aplica√ß√£o
        subprocess.run([sys.executable, "app.py"])
    except KeyboardInterrupt:
        logger.info("\nüëã Aplica√ß√£o finalizada pelo usu√°rio.")
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar aplica√ß√£o: {e}")

def main():
    """Fun√ß√£o principal."""
    logger.info("üèÅ Inicializando AnalyticSQL...")
    
    # Verifica se o arquivo .env existe
    env_file = os.path.join(os.path.dirname(__file__), "App", ".env")
    if not os.path.exists(env_file):
        print(f"‚ö†Ô∏è  Arquivo .env n√£o encontrado em {env_file}")
        print("üìù Certifique-se de configurar as vari√°veis de ambiente necess√°rias:")
        print("   - GEMINI_API_KEY")
        print("   - DATABASE_URL (opcional)")
        return 1
    
    # Executa migra√ß√µes
    if not run_migration():
        print("‚ùå Falha nas migra√ß√µes. Aplica√ß√£o n√£o ser√° iniciada.")
        return 1
    
    # Inicia aplica√ß√£o
    start_app()
    
    return 0

if __name__ == "__main__":
    exit(main())
